const express = require("express");
const ProjectField = require("../models/ProjectField");
const jwt = require("jsonwebtoken");
const SpecificationField = require("../models/SpecificationField");
const router = express.Router();

// üîê Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function auth(req, res, next) {
  const token = req.headers.authorization?.split(" ")[1];
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.userId = decoded.id;
    next();
  } catch {
    res.sendStatus(403);
  }
}

//–ø–æ–ª—è –ø—Ä–æ–µ–∫—Ç–∞

// üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è –¢–ï–ö–£–©–ï–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/fields', auth, async (req, res) => {
  try {
    const fields = await ProjectField.find({ user: req.userId });
    res.json(fields);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–µ–π' });
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ
router.post("/fields", auth, async (req, res) => {
  const { name, key, type } = req.body;
  try {
    const newField = await ProjectField.create({
      name,
      key,
      type,
      user: req.userId,
    });
    res.status(201).json(newField);
  } catch (err) {
    console.error(err);
    res.status(400).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—è" });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª–µ
router.delete("/fields/:id", auth, async (req, res) => {
  try {
    await ProjectField.deleteOne({ _id: req.params.id, user: req.userId });
    res.sendStatus(204);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—è" });
  }
});
 
//—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏


router.get("/specification-fields", auth, async (req, res) => {
  try {
    const fields = await SpecificationField.find({ user: req.userId });
    res.json(fields);
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–µ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
});

router.post("/specification-fields", auth, async (req, res) => {
  const { name, key, type } = req.body;
  try {
    const newField = await SpecificationField.create({ name, key, type, user: req.userId });
    res.status(201).json(newField);
  } catch (err) {
    res.status(400).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
});

router.delete("/specification-fields/:id", auth, async (req, res) => {
  try {
    await SpecificationField.deleteOne({ _id: req.params.id, user: req.userId });
    res.sendStatus(204);
  } catch (err) {
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
  }
});

module.exports = router;
